" The MIT License (MIT)
" 
" Copyright (c) 2014 Neil H Watson
" 
" Permission is hereby granted, free of charge, to any person obtaining a copy
" of this software and associated documentation files (the "Software"), to deal
" in the Software without restriction, including without limitation the rights
" to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
" copies of the Software, and to permit persons to whom the Software is
" furnished to do so, subject to the following conditions:
" 
" The above copyright notice and this permission notice shall be included in all
" copies or substantial portions of the Software.
" 
" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
" IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
" FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
" AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
" LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
" OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
" SOFTWARE.

set cursorline
set cursorcolumn
set history=50
set ruler
set tabstop=3
set softtabstop=3
set shiftwidth=3
set expandtab
set smartindent
set autoindent
set undolevels=100
set showmatch
set showcmd
set number
set tw=0
if v:version >= 703
   set colorcolumn=78
endif

let mapleader = "s"

call pathogen#infect()

" autowrite buffer on suspend, buffer switch etc...
set autowrite

syntax enable
colorscheme harlequin

"for scp
set nocp
let g:netrw_silent=1
if v:version >= 600
    filetype plugin indent on
endif


"date stamps
"Sunday January 02 2008.
iab  dmy  <c-r>=strftime("%A %B %d %Y")<cr>
"20080102
iab  ymd   <c-r>=strftime("%Y%m%d")<cr>
"02:32:22
iab  hms   <c-r>=strftime("%H:%M:%S")<cr> 

" misc abbs
iab CFE CFEngine

au BufRead,BufNewFile */journal/*.txt set tw=78 et spell
au BufRead,BufNewFile *.md set tabstop=4 shiftwidth=4
au BufRead,BufNewFile *.markdown set tabstop=4 shiftwidth=4
au BufRead,BufNewFile *.yml set softtabstop=2 tabstop=2 shiftwidth=2
au BufRead,BufNewFile *.yaml set softtabstop=2 tabstop=2 shiftwidth=2
au BufRead,BufNewFile Makefile* set noexpandtab
"au BufRead,BufNewFile *.py set noexpandtab

" Add help tags
":helptags ~/.vim/doc/
let g:EnableCFE3KeywordAbbreviations=1

"===================================
"FUNCTIONS
"===================================

fun! Getchar()
  let c = getchar()
  if c != 0
    let c = nr2char(c)
  endif
  return c
endfun

fun! Eatchar(pat)
   let c = Getchar()
   return (c =~ a:pat) ? '' : c
endfun

" for aligning equals or fat commas.
if !exists("*Nhw_equal_aligner")
function Nhw_equal_aligner (AOP)
    "Patterns needed to locate assignment operators...
    let ASSIGN_OP   = '=>\?'
    let ASSIGN_LINE = '^\(.\{-}\)\s*\(' . ASSIGN_OP . '\)'

    "Locate block of code to be considered (same indentation, no blanks)
    let indent_pat = '^' . matchstr(getline('.'), '^\s*') . '\S'
    let firstline  = search('^\%('. indent_pat . '\)\@!','bnW') + 1
    let lastline   = search('^\%('. indent_pat . '\)\@!', 'nW') - 1
    if lastline < 0
        let lastline = line('$')
    endif

    "Find the column at which the operators should be aligned...
    let max_align_col = 0
    let max_op_width  = 0
    for linetext in getline(firstline, lastline)
        "Does this line have an assignment in it?
        let left_width = match(linetext, '\s*' . ASSIGN_OP)

        "If so, track the maximal assignment column and operator width...
        if left_width >= 0
            let max_align_col = max([max_align_col, left_width])

            let op_width      = strlen(matchstr(linetext, ASSIGN_OP))
            let max_op_width  = max([max_op_width, op_width+1])
         endif
    endfor

    "Code needed to reformat lines so as to align operators...
    let FORMATTER = '\=printf("%-*s%*s", max_align_col, submatch(1),
    \                                    max_op_width,  submatch(2))'

    " Reformat lines with operators aligned in the appropriate column...
    for linenum in range(firstline, lastline)
        let oldline = getline(linenum)
        let newline = substitute(oldline, ASSIGN_LINE, FORMATTER, "")
        call setline(linenum, newline)
    endfor
endfunction
endif

"
" My maps
"

" Boxes commands
nnoremap <leader>ms !!boxes -d stone<CR>
vnoremap <leader>ms !boxes -d stone<CR>
autocmd BufEnter * nnoremap <leader>mc !!boxes -d simple<CR>
autocmd BufEnter * vnoremap <leader>mc !boxes -d simple<CR>
autocmd BufEnter * nnoremap <leader>xc !!boxes -d simple -r<CR>
autocmd BufEnter * vnoremap <leader>xc !boxes -d simple -r<CR>
autocmd BufEnter *.sh,*.yml,*.yaml nnoremap <leader>mc !!boxes -d shell<CR>
autocmd BufEnter *.sh,*.yml,*.yaml vnoremap <leader>mc !boxes -d shell<CR>
autocmd BufEnter *.sh,*.yml,*.yaml nnoremap <leader>xc !!boxes -d shell -r<CR>
autocmd BufEnter *.sh,*.yml,*.yaml vnoremap <leader>xc !boxes -d shell -r<CR>
autocmd BufEnter *.html nnoremap <leader>mc !!boxes -d html-cmt<CR>
autocmd BufEnter *.html vnoremap <leader>mc !boxes -d html-cmt<CR>
autocmd BufEnter *.html nnoremap <leader>xc !!boxes -d html-cmt -r<CR>
autocmd BufEnter *.html vnoremap <leader>xc !boxes -d html-cmt -r<CR>
"autocmd BufEnter *.[chly],*.[pc]c nnoremap <leader>mc !!boxes -d c-cmt<CR>
"autocmd BufEnter *.[chly],*.[pc]c vnoremap <leader>mc !boxes -d c-cmt<CR>
"autocmd BufEnter *.[chly],*.[pc]c nnoremap <leader>xc !!boxes -d c-cmt -r<CR>
"autocmd BufEnter *.[chly],*.[pc]c vnoremap <leader>xc !boxes -d c-cmt -r<CR>
autocmd BufEnter *.C,*.cpp,*.java nnoremap <leader>mc !!boxes -d java-cmt<CR>
autocmd BufEnter *.C,*.cpp,*.java vnoremap <leader>mc !boxes -d java-cmt<CR>
autocmd BufEnter *.C,*.cpp,*.java nnoremap <leader>xc !!boxes -d java-cmt -r<CR>
autocmd BufEnter *.C,*.cpp,*.java vnoremap <leader>xc !boxes -d java-cmt -r<CR>
autocmd BufEnter .vimrc*,.exrc nnoremap <leader>mc !!boxes -d vim-cmt<CR>
autocmd BufEnter .vimrc*,.exrc vnoremap <leader>mc !boxes -d vim-cmt<CR>
autocmd BufEnter .vimrc*,.exrc nnoremap <leader>xc !!boxes -d vim-cmt -r<CR>
autocmd BufEnter .vimrc*,.exrc vnoremap <leader>xc !boxes -d vim-cmt -r<CR>


" Align = or =>
"nnoremap <buffer> <silent> <leader>a :call Nhw_equal_aligner("null")<CR>
nnoremap <leader>a :Tabularize<CR>
" vsplit
nnoremap <leader>v :vsplit<CR>
" equi-space vsplits
nnoremap <leader>= <C-w>=
" swap between splits
nnoremap <leader>s <C-w><C-w>
" yank to system clipboard
vnoremap <leader>c "+y
" paste from system clipboard
nnoremap <leader>p "+gP
" buffer control using CtrlP plugin
nnoremap ; :CtrlPBuffer<CR>
" Cycle between buffers
noremap <C-Tab> :bnext <CR>
noremap <S-Tab> :bprevious <CR>

" Run buffer on write when enabled
command! Autorun   au BufWritePost <buffer> !%:p
command! Noautorun au! BufWritePost <buffer>
nnoremap <leader>r :!%:p<CR>

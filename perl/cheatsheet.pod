=pod

=head1 Perl cheatsheet

Can't remember how to do that thing in Perl? Neither can I, so I write it down.
I hope you find this helpful.

=head2 Named parameters to subroutines.

=over 3

   sub named_params_example {
      my ( $arg ) = @_;
      # Use my ( $self, $arg ) = @_; if you are in object land.

      say $arg->{one};
      say $arg->{two};
   }

   named_params_example({
      one => "First argument",
      two => "Second argument"
   });

   # In object land
   named_params_example(
   $self, {
      one => "First argument",
      two => "Second argument"
   });

=back

=head3 With default values

=over 3

   sub named_params_with_defaults {
      my ( $arg ) = @_;
      # Use my ( $self, $arg ) = @_; if you are in object land.
      
      # Set defaults
      #         If option given      Use options   Else
      my $one = exists $arg->{one} ? $arg->{one} : "default1";
      my $two = exists $arg->{two} ? $arg->{two} : "default2";

   }

   named_params_with_defaults({ one => "override arg 'one'" });

=back

=head2 Return named params from a subroutine
   
=over 3

   sub foo {
      my $clause = 'This is a clause';
      my @param = qw/ one two thee /;

      return ({
         clause => $clause,
         params => \@param
      });
   }

   my $r = foo();

   say "clause = [$r->{clause}]";
   for my $p ( @{ $r->{params} } ) {
      say "param = [$p]";
   }

=back

=head2 Making an object

Consider using object packages like Moo for larger projects, but by hand:

=over 3

   #!/usr/bin/perl

   use strict;
   use warnings;
   use feature 'say';

   my $o = Neil->new({ foo => 'bar', time => '11:30'});

   $o->dump_args;

   #######
   package Neil;

   use strict;
   use warnings;

   sub new {
      my ( $class, $arg ) = @_;
      my $self = bless $arg, $class;

      return $self;
   }

   sub dump_args {
      my $self = shift;
      say 'arg foo is '. $self->{foo};
      say 'arg time is '. $self->{time};
   }

   1;

=back

=head2 Making an inside out object

Consider using object packages like for larger projects, but by hand:

=over 3

   #!/usr/bin/perl
   
   use strict;
   use warnings;
   use Test::More;
   
   my $vm_swappiness = Sysctl->new({ variable => 'vm.swappiness' });
   
   is( $vm_swappiness->get, 60, "vm.swappiness == 60" );
   ok( $vm_swappiness->set( 67 ), "set vm.swappiness = 67" );
   is( $vm_swappiness->get, 67, "vm.swappiness == 67" );
   ok( $vm_swappiness->set( 60 ), "set vm.swappiness = 60" );
   is( $vm_swappiness->get, 60, "vm.swappiness == 60" );
   
   done_testing;
   
   #
   #
   #
   package Sysctl;
   
   use strict;
   use warnings;
   use POSIX qw( WIFEXITED );
   use Carp;
   
   my $sysctl_cmd = '/sbin/sysctl';
   my %sysctl_var;
   
   sub new {
      my ( $class, $arg_ref ) = @_;
      my $self = bless {}, $class;
   
      $sysctl_cmd = '/sbin/sysctl';
   
      $sysctl_var{$self} = $arg_ref->{variable}
         || croak q{
   Error Setting variable => is required when contructing new class. e.g.
   Sysctl->new({ variable => 'vm.swappiness' }); };
   
      return $self;
   }
   
   sub get {
      my $self = shift;
      my ( $sysctl_value )
         = qx{ $sysctl_cmd $sysctl_var{$self} } =~ m/= \s+ (\S+) /mxs;
      return $sysctl_value;
   }
   
   sub set {
      my ( $self, $value ) = @_;
   
      return WIFEXITED(
         ( system "$sysctl_cmd -w $sysctl_var{$self}='$value'" ) >> 8
      );
   }
   
   sub DESTROY {
       my $dead_body = $_[0];
       delete $sysctl_var{$dead_body};
       my $super = $dead_body->can("SUPER::DESTROY");
       goto &$super if $super;
   }
   
   1;

=back

=head2 Slurp a file the Perl 6 way

=over 3

   use Perl6::Slurp;

   # For text content:
   my $file_data = slurp '/etc/passwd';

   # For binary:
   my $file_data = slurp '/etc/passwd', { raw => 1 };

=back

=head2 Read from stdin

Foreach will read in the whole file, consuming ram, but while
consumes the file line by line.

=over3

   while ( my $line = <> ) {
      chomp line;
      ....

=back

=head2 Shell search and replace

=over 3

   find /path -name "*.*" -exec perl -pi -e 's///g' {} \;

=back

=head2 Search and replace, keep original and assign change to new variable.

=over 3

   ( my $new_var = $original ) =~ s/teh/the/g ;

=back

=head2 Match and store match in a single line

=over 3 

   ( my $match ) = $original =~ m/(kept)/;

=back

=head2 List available modules

=over 3

   perl -MFile::Find=find -MFile::Spec::Functions -Tlwe \
      'find { wanted => sub { print canonpath $_ if /\.pm\z/ }, \
      no_chdir => 1 }, @INC'

=back

=head2 Repeat operator

=over 3

   print '-' x 80;     # print row of 80 dashes

=back

=head2 What module should I use?

Consult CPAN's L<Task::Kensho|http://search.cpan.org/~ether/Task-Kensho-0.38/lib/Task/Kensho.pm>

=head2 Satellite snippets, including Cobbler

To access Satellite and Cobbler API's use L<XMLRPC::Lite|http://search.cpan.org/~phred/XMLRPC-Lite-0.717/lib/XMLRPC/Lite.pm>

=head3 Connect to Cobbler API

=over 3

   $server = XMLRPC::Lite->new( proxy => $server_url);
   $token = $server->login( $username, $password )->result();

=back

=head3 Dump Cobbler systems

=over 3

  sub dump_systems {
    my $results;
    my $systems = $server->get_systems->result();
    if ( $opts{hostname} ) {   
        foreach my $s ( @{$systems} ) {
            push @{$results}, $s if ( $s->{hostname} eq $opts{hostname} );
        }
        return $results;
    }   
    else {   
        return $systems;
    }   
  }
 
=back

=head3 Create Cobbler system
   
=over 3

   my $system_id = $server->new_system( $token )->result()
     or die "Could not create new system, [$!]";

=back

=head3 Update Cobbler system

=over 3

   $server->modify_system(
      $system_id, 'name', $opts{profile_name}, $token )->result()
      or die "Could not set name [$opts{profile_name}], [$!]";

   $server->modify_system(
      $system_id, 'kernel_options', "$opts{append}", $token)->result()
      or die "Could not set append, [$!]";

   $server->modify_system(
      $system_id, 'server', "$proxy{$sitename}.$domain", $token)->result()
      or die "Could not set server, [$!]";

=back

=head3 How to purge a Cobbler system

The mtime attribute form get_systems is in epoch seconds.

=head3 Delete Cobbler system

=over 3

   $server->remove_system($opts{profile_name}, $token )->result()
     or  die "Could not delete system [$opts{profile_name}], [$!]";

   $server->sync($token )->result()
     or die "Could not sync new system, [$!]";

=back

=head3 Connect to Satellite API

=over 3

   my $server  = XMLRPC::Lite->new( proxy => $server_url );
   my $token   = $server->call( 'auth.login', $username, $password )->result();

=back

=head3 List Satellite systems

=over 3

   my $systems = $server->call( 'system.listSystems', $token )->result;

=back

=head3 Access date from systems

=over 3

   $rec->{name}
   $rec->{id} # Note that id and SystemId are equal in the API.
   $rec->{last_checkin} # in form YYYMMDDTHH:MM:SS
   
=back

=head3 Delete Satellite systems

=over 3

   # @delete is an array of id or SystemId from returned systems.
   my $err = $server->call(
      'system.deleteSystems', $token, \@delete ) unless $argref->{dryrun};

=back

=head2 Time and dates

=head3 Difference or two date stamps in days

=over 3

   use Time::Piece;
   my $date1 = Time::Piece->strptime( $args{date}, "%Y-%m-%dT%H:%M:%S" );
   my $date2 = Time::Piece->strptime( $args{date}, "%Y-%m-%dT%H:%M:%S" );

   my $diff = $date1 - $date2;
   my $days = $diff->days

=back

Useful in converting datastamps to time objects. Can also diff in minues. See
L<module documentation|http://search.cpan.org/~rjbs/Time-Piece-1.30/Piece.pm>
for more info.

=head2 Licence

The MIT License (MIT)

Copyright (c) 2014 Neil H Watson

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

=cut
